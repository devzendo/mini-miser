MiniMiser - a simple embedded database client framework
-------------------------------------------------------
Current outstanding small tasks:

INFRASTRUCTURE AND RESOURCES FOR 0.1.0 RELEASE:
* Source code release
  * Switch development to private repo
  * Become confident with Mercurial on private repo
  * Investigate BitBucket security, virtual repo for just DevZendo.org
  * Create BitBucket account
  * Read Karl Fogel: advice on copyleft headers
  * Insert copyleft notices
  * Push to BitBucket
  * Switch development to BitBucket
  * Switch private Hudson to pull/update from BitBucket
  * Document repositories on website
* Maven release
  * See what's non-standard about my dependencies (i.e. Quaqua ZIP installed
    in private Archiva)
  * Investigate Sonatype OSS hosting: security, virtual Nexus for just DevZendo.org
  * Set up Sonatype OSS hosting
  * Deploy snapshots to Sonatype
  * Document changes to settings.xml to make use of it, in framework user guide
  * Document Sonatype repositories on website
* Mailing list
  * Investigate providers of mailing lists
  * Investigate web forum <-> mailing list adapters - Nabble, etc.
  * Investigate embedding Nabble on website
  * Set up minimiser-dev mailing list
  * Add me, and an archive user on private server
  * Document mailing list on website
* Release
  * Document steps to getting a release ready
    * Maven Release Plugin - investigate
    * Maven deploy non-snapshot to Sonatype
    * Assembly / ZIP with/without dependencies for non-Maven users, publish to website
    * Convert framework user guide to PDF, publish to website
    * Hg tagging
    * Page on website - changelog
  * Publicity
     
BUGS:
* beancounter: clean out config, restart - about text says minimiser 
* triggering an update check causes an NPE (that's correctly
  reported using the problem reporter). Closing the problem
  reporter, the status bar still says checking for updates. 
* text in file->New is a little BeanCounter-specific.
* if you have a db open in the previous list, and open a second instance,
  you get a nasty 'open in another process' dialog.
* sometimes on startup the hourglass sticks - happened soon after adding
  tools->options dialog - have added stuck hourglass detector to CursorManager
  but haven't reproduced it since.
* if you have the message viewer open and remove the last message, it
  correctly shows no messages. if another message comes in, the messages
  button thread activates cycling the colors, but there's (correctly) no
  button present (since the viewer is active). However, the viewer does not
  refresh to show that there are now more messages.
* Start the app with a single database open, then exit so that the
  database will be re-opened on startup. Upgrade the app plugin's
  schema, run the app, see the request to migrate, but refuse it.
  The database is not opened, but you don't see the intro page. 

CURRENT TASKS:
* Menu definition
  * Menus can be supplied by any Plugins, not just ApplicationPlugins
    - there's a global ApplicationMenu that has to be shared carefully between
      all MenuProvidingFacades
    - each open database can have its own ApplicationMenu
    - the global and the current-database ApplicationMenus are merged to
      present the final menu.

  * DONE An ApplicationMenu uber-bean, MenuFacade and OpenDatabaseList is passed
    into the application-provided MenuProviding(Facade)
  * DONE This uber-bean is added to the DatabaseDescriptor by a class in the
    databaseEventListenerList when the database is opened - this is done early,
    before the MenuProviding(Facade) receives it. See
    TabPaneCreatingDatabaseEventListener for something similar.
  * DONE This bean is then initialised by the MenuProviding(Facade)
    to add any application-specific menus, view tab identifiers, edit menu
    items, file menu items (import/export?)
  * The code that initialises the MenuProviding(Facade) must call it after
    the databaseEventListenerList has been registered as an ODL listener (so
    that the blank ApplicationMenu is stored in the DatabaseDescriptor), and
    before the DatabaseOpenerLifecycle opens all active DBs and switches to the
    last active one.
  * [NO, see below]: The MenuProvidingFacade's DatabaseOpenEvent listener will
    change its ApplicationMenu and it must do this BEFORE the menus are rebuilt
    by the MenuDatabaseEventObserver DatabaseOpenEvent Listener (otherwise, the
    menu will be rebuilt before the MPF DOE listener can work out what to put
    on the menu, and the MPD DOEL will have to trigger a menu rebuild itself
    (which it might do anyway if it loads the account list in a worker thread
    separately from the main synchronous DB load logic).
    - The MenuDatabaseEventObserver is loaded by the MenuMediatorImpl as part
      of its wiring list. (it's the first thing in the list).
    - The MenuMediatorImpl wires the MenuDatabaseEventObserver to the ODL as
      soon as it is constructed. (In its CTOR - grrr!)
    - The MenuMediatorImpl is constructed by the MenuInitialisingLifecycle.
    - So there's no way - the MenuDatabaseEventObserver DatabaseOpenEvent is
      always triggered very early when a DB is opened.
      - The ODL observer list when a DB is opened (e.g. recent file):
        MenuDatabaseEventObserver, TabPaneCreatingDatabaseEventListener,
        TabPaneManagerDatabaseEventListener
        
  * DONE (via ODL listeners) Listeners can be added to the MenuFacade so that
    the menu code can be made aware of events e.g. number of databases open 
    (so that menu items can be disabled if only one / zero databases are open).
  * DONE These listeners are really best placed against the OpenDatabaseList as that's
    where knowledge of these events comes from.
    ? Is the MenuFacade needed?
  * The MenuFacade can be asked to rebuild the entire menu at any time
    e.g. if you add an account, and the view menu is dynamically built from the
    static set plus accounts, you'd want to load the account list in a worker
    thread, then populate the view menu in the EDT and trigger a menu rebuild. 
    ? Perhaps the rebuild could be triggered by a method on the ApplicationMenu
      that delegates internally to Menu(Impl)? That violates SRP.
    ? How would the app menu code gain access to the database?
      The MenuProviding facade would be initialised after the database opening
      facade? (No, just after the Plugins are loaded)
      The MenuProviding facade could be given access to the OpenDatabaseList?
      (This could be done by app authors using the SpringLoader, or by the
      framework via a MenuProviding(Facade) method).
      That's the only way it could be notified of database opening, closing and
      switching, then get the current database and refresh the menu.
      After receiving a DatabaseOpenEvent, it could read the DB, rebuild the
      ApplicationMenu, and trigger a rebuild.
       
  * Other independent tasks to be complete before the main menu definition
    work is done:
    * Add an Edit menu with Undo / Redo, Cut / Copy / Paste - not sure how we'll
      hook into this yet.
    * DONE Allow for extensible TabIdentifiers - the static set we have now, with
      Categories removed, and allow for dynamic additions (e.g. each different
      account). Allow each plugin to register view TabIdentifiers in the
      ApplicationMenu
    * PROBABLY NOT BEST Allow ActionListeners to be registered against these TabIdentifiers.
    * Provide more than just an add method for TabIdentifiers in the ApplicationMenu.
    
* Remove Mycila
* Documentation
  Reference:
    Facades:
* Add the wizard graphic to the application plugin
* Move the application plugin's resources out to a facade?
* Allow one plugin to reference another plugin (e.g. app plugin
  using versions or categories)      
      
  
CURRENT OUTSTANDING BLOCKERS FOR RELEASE:
* The message viewer looks pants on the Mac - use the form
  layout from jgoodies?
* Remove the message queue viewer red-phase-change - or don't do
  it on the Mac since it has no effect there.
* Mac - new file - file chooser doesn't allow creation of folders!
  [ think this is fixed after introduction of quaqua, althoug the
    new folder name popup doesn't have any title, or contents
    other than the text entry area ]
* Mac - ensure correct addition of quaqua to the java.library.path
* Mac - Apple Q doesn't use the mainFrameCloseActionListener and
  doesn't prompt for closing open DBs

* prefs should be stored in platform-specific location, not just ~/.minimiser -
  need ~/Library/Application Support/MiniMiser on Mac OS X
  need Documents and Settings/username/whatever on Windows.

* if 'SQL view available' flag gets disabled in prefs, close any currently-
  open SQL views (with a notification)
* pressing return in sql tab gives a message - should just be ignored (Mac)
* Message queue
* Privacy policy dialog
* Update available checker.
* If you've said no to update checks, there's no way to change your
  mind and say yes - need an option in tools/options.
* Help browser

CROSS-PLATFORM UI ISSUES:
* the background to the tabs is the same colour as the tabs, making the tabs
  hard to see (on windows).
  Ditto the tabs in the about box.
* Mac:
  * menu should be on the standard apple menu bar
    * about menu item needs hooking in
    * exit needs hooking in
    * tools->options is prefs on the main menu
  * title should be set properly
  * there are white patches on the dialogs - e.g. the warning
    you get when going into SQL view
  * new database file chooser is unusable - needs create new folder option
  * messages button doesn't pulse.
  * sql view looks too full of layout management lines
  * temporary text being displayed in the status bar causes a
    re-layout of the main pane - e.g. trigger an update check and
    notice when the 'Checking for updates' text appears/goes.

-- final tasks before release --
* review all TODOs
* review code complexity, coverage, etc.

* decide final product name
* create logo, draw nice icons
* rename product


DRY / TDD / architecture improvements:
* Factor out general HTML-dialog-from-resource code?

* Why do StatusBars need DelayedExecutors?

* database switching via menu does not seem to have been done TDD - 
  addDatabaseSwitchObserver is only called from wireAdapters - add tests

* DRY: createDatabaseWithPluggableOpenBehaviour was duplicated to allow multiple
  databases - this generalisation could be applied to all users of this code,
  then the single db open could be removed. PersistenceUnittestCase
  
* close on startup - problem reporting - closeFailureShouldDisplayAnError
  
* tests for opening a database that had had the opening software termiated on
  it - what about lock files being present on startup?

* change to injecting the StubProblemReporter into all places that
  currently use the ProblemDialog.

* refactoring menuimpl and the menus - loading state from the rest of the
  objects (prefs, opentablist, opendatabaselist), rather than replicating it
  in menustate. had added a factory to stash menustate, but this can go when
  the access via the springloader to the rest of the system objects is
  complete.

* menu updating methods currently pass in state as the menu used to maintain
  its own state which duplicated state held elsewhere (opentablist, open
  databaselist). These methods still receive data from the menumediator
  listeners, but do nothing with it.  

* sql tab:
  * command handlers need to have some tests around them

* passwordEntryDialog & helper - rework this to use the GUIValueObtainer.

* extract an interface from INIFile and allow an instance of this to be passes
  into Prefs. Create a memory-based one for unit tests using a real prefs, but
  without the disk overhead
  
* MessageQueue - need to factor out the handling of DSTA messages (getting /
  setting flags on add/remove)

* Set the TabPaneManager in the MainFrame immediately after the
  plugins have loaded, rather than letting the IntroPanel get
  loaded on demand when tabs are hidden?
     
* if there is no app plugin, the framework should terminate after
  displaying the problem reporter - needs to be a way to indicate
  a fatal error to the lifecycle manager that shuts down the
  lifecycles that have initialised already, and does not cause any
  subsequent lifecycles to be started.
  * define a LifecycleStartupException
  * Lifecycle.startup can throw this
  * lifecycle manager should detect LifecycleStartupExceptions
    and stop going through its lifecycle.startup list, and throw
    a LifecycleStartupException again.
  * LifecycleStartupAWTEventListener that calls LifecycleManager
    startup should detect the LifecycleStartupException and do what
    the MainFrameCloseActionListener's doShutdown method does.
      
  * plugin manager lifecycle throws LifecycleStartupException after
    it has shown the problem dialog
     
NIGGLES:
* need to provide a log4j configuration - apache httpclient and
  spring framework are barfing waaay too much
  
* Buttons on the should
  just contain pretty icons, and the text that's currently in the
  buttons should be next to them.

* Intro panel is shown briefly when closing (since the
  OpenDatabaseList reaches empty during close). Crowbar?

DOCUMENTATION:
* fill in the rest of the acks in credits.html

* Add a FAQ to the help contents with notes from the docs page re moving /
  renaming databases.

* about dialog
  * switch to HTML version of license text - text/plain looks poor

* docs to write:
  * privacy policy
  * welcome text
  * changelog text
  * technical doc:
    * database schema
    * database schema model with Jude, versioned as of 0.1
    * architecture
    * coding guidelines, test driven development, listen to checkstyle
    * how to contribute
    * environment setup - eclipse, etc
  * user reference guide
  * getting started guide
  
* blog category
* intro articles

MAVEN / BUILD:
* create installer for windows
* create .deb package for Ubuntu
* create .dmg disk image for Mac OS X
* make platform-specific artifacts for the framework, and move
  look-n-feel initialisation to them, with a platform.xml
  application context that defines the appropriate platform LnF
  bean to use. Then move quaqua's jars to be dependencies against
  the macosx platform artifact (all platform artifacts depend on
  the core framework). Then the BeanCounterMacOSX would depend on
  MiniMiserMacOSX. Perhaps quaqua's JNI libs and the assembly
  that extracts them could be against the framework, rather than
  the app?

OUTSTANDING QUERIES:
* Q: Why prompt for close confirmation if we have databases open, on exit?
  It's not as though you'd lose any data (it is all in a database, after all).

LATER RELEASES:
* Bug reporting dialog - direct to bug database
* the problem reporter needs the default contact details address
  making a resource (the one you see if there's no app plugin, or
  the app plugin doesn't define it)

* decide which currencies to support
* add currency object, entries for all supported currencies
* display flags in pretty list in currency wizard page
* choose a sensible default-selected currency based on system locale
* BUG: Currency symbols don't render correctly on Windows

* change the frame title / tab set depending on the selected database - when
  opening many databases on startup, the display "thrashes". It should not do
  this until the last active database is switched to.

* add 'clear all DSTA flags' option to tools->options
  
* update checker should use a DSTA if the remote version is different
  that the last saved remote version, otherwise the update available
  only appears once.
  